#summary 토비의 스프링, 1부 이해 - 6장 AOP
<wiki:toc max_depth="2" />

= 내용정리 =

== 6.1 트랜잭션 코드의 분리 ==

upgradeLevels 메소드는 다음과 같이 구성되어 있다.

{{{
public void upgradeLevels() throws Exception {
   // 트랜잭션경계설정

   // 비즈니스 로직

   // 트랜잭션경계설정
}
}}}

트랜잭션 경계설정 부분을 클래스로 빼고, 이를 DI 의 실제 사용할 오브젝트 클래스를 감추고 인터페이스를 통해 간접적으로 접근하게 하는 개념을 이용해본다.

UserService 인터페이스로 만들고 기존의 소스는 UserService 를 구현하면서 비즈니스로직만 담고 있는  UserServiceImpl 클래스로 만든다. 그리고 UserService 를 구현하면서 트랜잭션경계설정만 담고 있는 UserServiceTx 클래스도 만든다. 그래서 UserServiceTx 에게 실제적인 로직 처리 작업을 위임한다.

{{{
public class UserServiceTx implements UserService {
   UserService userService;
   public void setUserService(UserService userService) {
      this.userService = userService;
   }

   PlatformTransactionManager transactionManager;
   public void setTransactionManager(PlatformTransactionManager transactionManager) {
      this.transactionManager = transactionManager;
   }

   public void add(User user) { userService.add(user); }
 
   public void upgradeLevels(User user) { 
      TransactionStatus status = this.transactionManager.getTransaction(new DefaultTransactionDefinition());
      try {
         userService.upgradeLevels(); 
         this.transactionManager.commit(status);
      } catch (RuntimeException e) {
         this.transactionManager.rollback(status);
         throw e;
      }
   }
}
}}}

기능을 분리 후 구성관계는 다음과 같다.

Client(UserServiceTest) -> UserServiceTx -> UserServiceImpl

xml 설정파일도 다음과 같이 수정한다.

{{{
<bean id="userService" class="springbook...UserServiceTx">
   <property name="transactionManager" ref="transactionManager" />
   <property name="userService" ref="userServiceImp;" />
</bean>
<bean id="userServiceImpl" class="springbook...UserServiceImpl">
   <property name="userDao" ref="userDao" />
   <property name="mailSender" ref="mailSender" />
</bean>
}}}

TestUserSerivce 는 UserServiceImpl 을 상속받도록 수정한다.

{{{
static class TestUserSerivce extends UserServiceImpl {
   ...
}
}}}

UserServiceTest를 수정한다.

{{{
@Autowired
UserService userService; // type 이 두개 존재하면 이름으로 찾는다.
@Autowired
UserServiceImpl userServiceImpl;

@Test
public void upgradeAllOrNothing() throws Exception {
   TestUserService testUserService = new TestUserService(users.get(3).getId());
   testUserService.setUserDao(userDao);
   testUserService.setMailSender(mailSender);

   UserServiceTx txUserService = new UserServiceTx();
   txUserService.setTransactionManager(transactionManager);
   txUserService.setUserService(testUserService);

   ...
   try {
      txUserService.upgradeLevels();
      fail("TestUserServiceException expected");
   }
   ...
}}}


== 6.2 고립된 단위 테스트 ==

UserServiceTest 라는 테스트 대상이 테스트 단위인 것처럼 보이지만 사실은 그 뒤의 의존관계를 따라 등장하는 오브젝트와 서비스, 환경이 모두 합쳐져 테스트 대상이 되고 있는 것이다. 그래서 테스트의 대상, 환경 등에 종속되고 영향 받지 않도록 고립시킬 필요가있다. MockMailSender 를 이용한 것 처럼 MockUserDao 를 만들어서 사용한다.

{{{
static class MockUserDao extends UserDao {
   private List<User> users;
   private List<User> updated = new ArrayList();

   private MockUserDao(List<User> users) { this.users = users; }
   private List<User> getUpdated() { return this.updated; }

   public List<User> getAll() { return this.users; }
   public void update(User user) { updated.add(user); }

   public void add(User user) { throw new UnsupportedOperationException(); }
   ...
}
}}}

{{{
@Test
public void upgradeLevels() throws Exception {
   UserServiceImpl userServiceImpl = new UserServiceImpl();

   MockUserDao mockUserDao = new MockUserDao(this.users);
   userServiceImpl.setUserDao(mockUserDao);
 
   MockMailSender mockMailSender = new MockMailSender();
   userServiceImppl.setMailSender(mockMailSender);

   userServiceImpl.upgradeLevels();

   List<User> updated = mockUserDao.getUpdated();
   assertThat(updated.size(), is(2));

   ...
}
}}}

앞으로 '테스트 대상 클래스를 목 오브젝트 등의 테스트 대역을 이용해 의존 오브젝트나 외부의 리소스를 사용하지 않도록 고립시켜서 테스트하는 것'을 단위 테스트라고 보고, 2개 이상의 성격이나 계층이 다른 오브젝트가 연동하도록 만들어 테스트 하거나, 외부의 DB 나 파일, 서비스 등의 리소스가 참여하는 2개 이상의 단위가 결합해서 동작하는 테스트를 통합 테스트라고 보겠다.

항상 단위 테스트를 먼저 고려해야 하며 DAO 테스트는 DB 외부 리소스를 사용하기 때문에 통합테스트로 분류된다. 스프링 테스트 컨텍스트 프레임워크를 이용하는 테스트는 통합 테스트이다.

*목 프레임워크*

목 프레임웍 중 Mockito 프레임워크는 콕 클래스를 일일이 준비해둘 필요가 없다. 다음과 같이 스태틱 메소드인 mock 으로 호출하게 한다.

{{{
UserDao mockUserDao = mock(UserDao.class);
when(mockUserDao.getAll()).thenReturn(this.users); // 스텁 기능 추가
verify(mockUserDao, times(2)).update(any(User.class)); // 두번 호출됐는지 확인
}}}

{{{
@Test
public void mockUpgradeLevels() throws Exception {
   UserServiceImpl userServiceImpl = new UserServiceImpl();
   
   UserDao mockUserDao = mock(UserDao.class);
   when(mockUserDao.getAll()).thenReturn(this.users);
   userServiceImpl.setUserDao(mockUserDao);

   MailSender mockMailSender = mock(MailSender.class);
   userServiceImp.setMailSender(mockMailSender);

   ...
   
   verify(mockUserDao, times(2)).update(any(User.class));
   ...

   // 전달된 파라미터를 가져와 내용을 검증
   ArgumentCaptor<SimpleMessage> mailMessageArg = ArgumentCaptor.forClass(SimpleMessage.class);
   verify(mockMailSender, times(2)).send(mailMessageArg.capture());
   List<SimpleMailMessage> mailMessages = mailMessageArg.getAllValues();
   assertThat(mailMessages.get(0).getTo()[0], is(users.get(1).getEmail()));
   ...
}
}}}


== 6.3 다이내믹 프록시와 팩토리 빈 ==

트랜잭션 부가기능과 비즈니스 로직 핵심기능을 분리하고 클라이언트에서 부가기능을 가진 클래스를 이용하고, 해당 클래스에서 다시 비즈니스 로직을 가진 핵심기능을 사용하는 구조가 되었다.

만약 클라이언트가 핵심기능을 가진 클래스를 직접 사용한다면 부가기능이 적용될 기회가 없게 된다. 그래서 부가기능을 가진 클래스는 핵심기능을 가진 클래스와 같은 인터페이스를 구현해서 클라이언트와 핵심기능을 가진 클래스 사이에 마치 자신이 핵심기능을 가진 클래스인 것 처럼 끼어들어야 한다. 

이렇게 마치 자신이 클라이언트가 사용하려고 하는 실제 대상인 것처럼 위장해서 클라이언트의 요청을 받아주는 것을 프록시라고 부르며, 프록시를 통해 최종적으로 요청을 위임받아 처리하는 실제 오브젝트를 타깃이라고 부른다.

프록시의 사용 목적은 두 가지로 구분할 수 있다. 첫째, 클라이언트가 타깃에 접근하는 방법을 제어하기 위해서다. 두 번째는 타깃에 부가적인 기능을 부여해주기 위해서이다. 이 두 가지 목적에 따라서 디자인 패턴에서는 다른 패턴으로 구분한다.

*데코레이터 패턴*

타깃에 부가적인 기능을 런타임 시 다이내믹하게 부여해주기 위해 프록시를 사용하는 패턴이다. 대표적인 예로 BufferedInputStream 이 있다. 트랜잭션 부가기능을 부여해준 UserServiceTx 도 이에 속한다.

{{{
   InputStream is = new BufferedInputStream(new FileInputStream("a.txt"));
}}}

*프록시 패턴*

프록시를 사용하는 방법 중에서 타깃에 대한 접근 방법을 제어하려는 목적을 가진 경우다. add 메소드에서 UpsupportedOperationException 예외가 발생하게 한 것도 접근권한 제어용 프록시라고 볼 수 있다.

*다이내믹 프록시*

프록시는 기존 코드에 영향을 주지 않으면서 타깃의 기능 확장, 접근 방법을 제어할 수 있는 유용한 방법이지만 일일이 모든 인터페이스를 구현해서 클래스를 새로 정의해야 하는 불편함이 있다.

프록시는 타깃오브젝트로 위임하는 기능과 부가기능 수행으로 기능이 나뉠 수 있다. 이 때 부가기능 코드가 중복될 가능성이 많으며, 일일이 만들어 줘야 하는 단점을 JDK 의 java.lang.reflect 리플렉션기능을 이용해서 해결할 수 있다.

다이내믹 프록시는 이런 리플렉션 기능을 이용해서 프록시를 만들어준다. 이는 자바의 코드 자체를 추상화해서 접근하도록 만든 것이다.

{{{
public class RelectionTest {
   @Test
   public void invokeMethod() throws Exception {
      String name = "Spring";
      
      assertThat(name.length(), is(6));
      Method lengthMethod = String.class.getMethod("length");
      assertThat((Integer)lengthMethod.invoke(name), is(6));      
   }
}
}}}

다이내믹 프록시를 이용한 프록시를 만들어 본다.

{{{
interface Hello { // 인터페이스
   String sayHello(String name);
   String sayHi(String name);
   String sayThankYou(String name);
}
}}}

{{{
public class HelloTarget implements Hello { // 구현 클래스
   public String sayHello(String name) { return "Hello" + name; }
   public String sayHi(String name) { return "Hi" + name; }
   public String sayThankYou(String name) { return "ThankYou" + name; }
}
}}}

{{{
public class UppercaseHandler implements InvocationHandler { // InvocationHandler 구현
   Object target;
   private UppercaseHandler(Object target) { this.target = target; }
   public Object invoke(Object proxy, Method method, Object[] args) throws Throwble {
      Object ret = method.invoke(target, args);
      if(ret instanceof String) { // 리턴타입이 String 인 경우에만
         return ((String)ret).toUpperCase(); // 대문자로 변경
      } else { return ret; }
   }
}
}}}

{{{
Hello proxiedHello = (Hello) Proxy.newProxyInstance(
   getClass().getClassLoader(), // 클래스 로더
   new Class[] { Hello.class }, // 구현할 인터페이스의 배열
   new UppercaseHandler(new HelloTarget())); // 부가기능과 위임코드를 담은 InvocationHandler 
}}}

InvocationHandler 로 인해 어떤 종류의 인터페이스를 구현한 타깃이든 상관없이 재사용할 수 있고, 호출하는 메소드의 이름, 파라미터 개수와 타입, 리턴 타입등의 정보를 가지고 부가적인 기능을 적용할 메소드를 선택할 수 있다. 

*다이내믹 프록시를 이용한 트랜잭션 부가기능*

{{{
public class TransactionHandler implements InvocationHandler {
   private Object target;
   private PlatformTransactionManager;
   private String pattern;

   public void setTarget(Object target) { this.target = target; }
   public void setTransactionManager(PlatformTransactionManager transactionManager) { this.transactionManager = transactionManager; }
   public void setPattern(String pattern) { this.pattern = pattern; }

   public Object invoke(Object proxy, Method method, Object[] args) throws Throwble {
      if(method.getName().startsWith(pattern)) {
         return invokeInTransaction(method, args);
      } else {
         return method.invoke(target, args);
      }
   }

   private Object invokeInTransaction(Method method, Object[] args) throws Throwble {
      TransactionStatus status = this.transactionManager.getTransaction(new DefaultTransactionDefinition());
      try {
         Object ret = method.invoke(target, args);
         this.transactionManager.commit(status);
         return ret;
      } catch (InvocationTargetException e) { // InvocationTargetException 으로 포장되서 전달됨
         this.transactionManager.rollback(status);
         throw e.getTargetException();
      }
   }
}
}}}

{{{
@Test
public void upgradeAllOrNothing() throws Exception {
   ...
   TransactionHandler txHandler = new TransactionHandler();
   txHandler.setTarget(testUserService);
   txHandler.setTransactionManager(transactionManager);
   txHandler.setPattern("upgradeLevels");
   UserService txUserService = (UserService) Proxy.newProxyInstance(
      getClass().getClassLoader(),
      new Class[] { UserService.class }, 
      txHandler);
   ...
}
}}}

*다이내믹 프록시를 위한 팩토리 빈*

다이내믹 프록시를 이용해서 UserService 를 구성해봤지만 이를 DI 할 수가 없는 문제점이 발생했다. 스프링에서는 클래스 정보를 가지고 디폴트 생성자를 통해 오브젝트를 만드는 방법 외에도 팩토리 빈을 이용한 생성방법이 있다. 팩토리 빈은 스프링을 대신해서 오브젝트의 생성로직을 담당하도록 만들어진 특별한 빈을 말한다.

{{{
public class Message {
   String text;
   private Message(String text) { this.text = text; }
   public String getText() { return text; }
   public static Message newMessage(String text) { return new Message(text); }
}
}}}

{{{
public class MessageFactoryBean implements FactoryBean<Message> {
   String text;
   public void setText(String text) { this.text = text; }
   public Message getObject() throws Exception {
      return Message.newMessage(this.text);
   }
   public Class<? extends Message> getObjectType() {
      return Message.class;
   }
   public boolean isSingleton() { return false; }
}
}}}

{{{
<bean id="message" class="springbook...MessageFactoryBean">
   <property name="text" value="Factory Bean" />
</bean>
}}}

{{{
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration
public class FactoryBeanTest {
   @Autowired
   ApplicationContext context;
   @Test
   public void getMessageFromFactoryBean() {
      Object message = context.getBean("message");
      assertThat(message, is(Message.class)); // 타입이 MessageFactoryBean 이 아닌 getObject 의 리턴값인 Message 이다.
      ...
      Object factory = context.getBean("&message"); // MessageFactoryBean 자체를 리턴
      assertThat(factory, is(MessageFactoryBean.class)); 
   }
}
}}}

TransactionHandler를 이용하는 다이내믹 프록시를 생성하는 팩토리 빈 클래스를 만들어 본다.

{{{
public class TxProxyFactoryBean implements FactoryBean<Object> { // 범용적으로 사용
   private Object target;
   private PlatformTransactionManager;
   private String pattern;
   Class<?> serviceInterface;

   public void setTarget(Object target) { this.target = target; }
   public void setTransactionManager(PlatformTransactionManager transactionManager) { this.transactionManager = transactionManager; }
   public void setPattern(String pattern) { this.pattern = pattern; }
   public void setServiceInterface(Class<?> serviceInterface) { this.serviceInterface = serviceInterface;

   public Object getObject() throws Exception {
      TransactionHandler txHandler = new TransactionHandler();
      txHandler.setTarget(target);
      txHandler.setTransactionManager(transactionManager);
      txHandler.setPattern(pattern);
      return Proxy.newProxyInstance(
         getClass().getClassLoader(),
         new Class[] { serviceInterface },
         txHandler);
   }

   public Class<?> getObjectType() {
      return serviceInterface;
   }

   public boolean isSingletom() { return false; }
}
}}}

{{{
<bean id="userService" class="springbook...TxProxyFactoryBean">
   <property name="target" ref="userServiceImpl" />
   <property name="transactionManager" ref="transactionManager" />
   <property name="pattern" value="upgradeLevels" />
   <property name="serviceInterface" value="springbook...UserService" />
</bean>
}}}

테스트의 upgradeAllOrNothing 메소드는 수동 DI 를 통해 직접 다이내믹 프록시를 만들어서 사용하니 팩토리 빈이 적용되지 않는다. 그래서 빈으로 등록된 TxProxyFactoryBean 을 가져와서 프록시를 만들어 볼 수 있다.

{{{
public class UserServiceTest {
   ...
   @Autowired ApplicationContext context;
   ...
   @Test
   @DirtiesContext
   public void upgradeAllOrNothing() throws Exception {
      ...
      TxProxyFactoryBean txProxyFactoryBean = context.getBean("&userService", TxProxyFactoryBean.class);
      txProxyFactoryBean.setTarget(testUserServiceImpl);
      UserService txUserService = (UserService) txProxyFactoryBean.getObject();
      ...
   }
}}}

프록시 팩토리 빈을 사용해서 타깃 인터페이스를 구현하는 클래스를 일일이 만드는 번거로움을 제거했다. 하나의 핸들러 메소드를 구현하는 것만으로 수많은 메소드에 부가기능을 부여해줄 수 있으니 부가기능 코드의 중복 문제도 사라졌다. 

하지만 프록시를 통해 타깃에 부가기능을 제공하는 것은 메소드 단위로 일어나는 일으로 하나의 클래스 안에 존재하는 여러 개의 메소드에 부가기능을 한 번에 제공하는 건 어렵지 않았지만 한 번에 여러개의 클래스에 공통적인 부가기능을 제공할 수는 없다.

또한 하나의 타깃에 여러개의 부가기능을 적용할 수 없다.

그리고 TransactionHandler 오브젝트가 프로시 팩토리 빈 개수만큼 만들어지는 문제점이 있다. TransactionHandler 는 타깃 오브젝트를 프로퍼티로 갖고 있기 때문에 트랙잭션 부가기능을 제공하는 동일한 코드임에도 불구하고 타깃 오브젝트가 달라지면 새로운 TransactionHandler 오브젝트를 만들어내야 한다.


== 6.4 스프링의 프록시 팩토리 빈 ==

== 6.5 스프링 AOP ==

== 6.6 트랜잭션 속성 ==

== 6.7 애노테이션 트랜잭션 속성과 포인트컷 ==

== 6.8 트랜잭션 지원 테스트 ==




= 생각하기 =