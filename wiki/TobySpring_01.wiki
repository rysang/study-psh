#summary 토비의 스프링, 1부 이해 - 1장 오브젝트와 의존관계

<wiki:toc max_depth="2" />

= 내용정리 =

== 1.1 초난감 DAO ==

제목은 초난감DAO 이지만 많이 보고 익숙한 코드였다. 

{{{
public void userDAOTest() {

   ... conde

}
}}}


== 1.2 DAO의 분리 ==

{{{
public void userDAOTest() {

   ... conde

}
}}}

== 1.3 DAO의 확장 ==



== 1.4 제어의 역전 ==


== 1.5 스프링의 IoC ==


== 1.6 싱글톤 레지스트리와 오브젝트 스코프 ==


== 1.7 의존관계 주입(DI) ==


== 1.8 XML을 이용한 설정 ==

애노테이션으로 설정된 application context 클래스를 XML 로 변경해본다.
ref 속성으로 여전히 의존관계를 설정할 수 있다.
(d사와 n사는 각자 가져가서 알아서 쓸테지만 ref 를 잘 설명할 수 있을 것 같아 예제를 좀 바꾸어 보았다.)

*applicationContext.xml*
{{{
<beans>
  <bean id="dConnectionMaker" class="springbook...DConnectionMaker" />
  <bean id="nConnectionMaker" class="springbook...NConnectionMaker" />

  <bean id="userDao" class="springbook...UserDao">
     <property name="connectionMaker" ref="dConnectionMaker" />
  </bean>
</beans>
}}}

xml을 이용해 application context 를 만들었으니 생성자도 같이 바뀐다.

{{{
ApplicationContext context = new GenericXmlApplicionContext("applicationContext.xml");
}}}

*DataSource 구현 클래스 이용하기*



나는 처음 개발할 때 applicationContext 를 xml 로만 작성해서인지
애노테이션에 적응이 덜 되서 인지
한 눈에 파악할 수 있는 XML 방식이 더 편하고 좋은 것 같다.
여러분의 생각은 어떠신지요??


= 생각하기=

"여기 xml 에서 정의하시고 블라블라블라~ 그리고 setter 없으면 에러나요!"
"스트러츠했었다고요? 그럼 금방하겠네~ 비슷해요~"
약 1년전, 스트러츠만 하다가 스프링프로젝트에 처음 들어왔을 때
동료가 설명해준 스프링에 대한 나의 기억이다. 

이 기억들은 스프링교육이나 책을 공부하면서 점점 의미를 더해가고 있다.
그렇다고 왜 에러가 나는지 몰랐다는 뜻은 아니다. 다만 IoC, DI 라는 개념을 생각해 봤을 때
나는 그저 "그냥 그래야만해~" 라고 깊게 생각하지 않고 개발을 해왔던 것 같다.