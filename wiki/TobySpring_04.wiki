#summary 토비의 스프링, 1부 이해 - 4장 예외

<wiki:toc max_depth="2" />

= 정리 =

개요..

== 4.1 사라진 SQL Exception ==

3장에서 JdbcContext에서 JdbcTemplate를 적용하는 코드를 만든 후 각 메소드에서 예외처리의 차이점을 발견할 수 있다.

{{{
public void deleteAll() throws SQLException {
   this.jdbcContext.executeSql("delete from users");
}
}}}

{{{
public void deleteAll() {
   this.jdbcTemplate.update("delete from users");
}
}}}

*예외 블랙홀*

예외를 처리할 때 반드시 지켜야 할 핵심 원칙은 한 가지다. 모든 예외는 적절하게 복구되든지 아니면 작업을 중단시키고 운영자 또는 개발자에게 분명하게 통보돼야 한다.

다음과 같은 코드들은 예외를 무시하거나 잡아먹어 버리면서 심각한 상황을 초래할 수 있다.

 # 초난감 예외처리 코드 1
{{{
} catch (SQLException e) {
}
}}}
 # 초난감 예외처리 코드 2
{{{
} catch (SQLException e) {
   System.out.println(e);
}
}}}
 # 초난감 예외처리 코드 3
{{{
} catch (SQLException e) {
   e.printStackTrace();
}
}}}
 # 그나마 나은 예외처리 (?)
{{{
} catch (SQLException e) {
   e.printStackTrace();
   System.exit(1);
}
}}}

*무의미하고 무책임한 throws*

예외처리를 throws 를 통해 예외를 무조건 던져버리는 선언을 모든 메소드에 기계적으로 넣는 무책임한 throws 선언은 의미있는 정보를 얻을 수가 없어 적절한 처리가 될 수 있는 기회도 얻지 못하게 된다.


*예외의 종류와 특징*

예외의 종류에는 크게 3가지가 있다.

 1. Error 

java.lang.Error 클래스의 서브클래스로, 시스템에 뭔가 비정상적인 상황이 발생했을 경우에 사용되며 주로 VM 에서 발생시키는 것이기 때문에 어플리케이션 코드에서는 특별한 신경을 쓰지 않아도 된다. OutOfMemoryError 나 ThreadDeath 같은 에러가 이에 해당한다.

 2. Exception 과 체크 예외

Exception 을 상속받는 서브 클래스 중 RuntimeException 은 상속받지 않는 서브 클래스이다. 이런 체크 예외가 발생할 수 있는 메소드를 사용할 경우 반드시 예외처리가 필요하다. catch 문이나 throws 로 처리해줘야 컴파일 에러가 나지 않는다. IOException 이나 SQLException 이 이에 해당한다.

 3. RuntimeException 과 언체크예외

java.lang.RuntimeException 을 상속받은 예외들은 예외처리를 강제하지 않기 때문에 언체크예외라고 불린다. 또는 대표 클래스 이름을 따서 런타임예외라고도 불린다. 이 예외는 주로 프로그램의 오류가 있을 때 발생하도록 의도된 것들로 코드에서 미리 조건을 체크하도록 주의 깊게 만든다면 피할 수 있다. NullPointerException 이나 IllegalArgumentException 이 이에 해당한다.

체크 예외가 예외처리를 강제하는 것 때문에 예외 블랙홀이나 무책임한 throws 같은 코드가 남발되는 현상이 있어서 최근에는 예상 가능한 예외상황을 다루는 예외를 체크 예외로 만들지 않는 경향이 있다.

*예외처리 방법*

 1. 예외 복구


 2. 

= 생각하기 =